name: "Dev CI"
on:
    push:
        branches: ["main"]
    pull_request:
        branches: ["main"]
    workflow_dispatch:
jobs:
    code-quality:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4
            - name: Install Node
              uses: actions/setup-node@v4
              with:
                  node-version: "20.x"
            - name: Install Ruby
              uses: ruby/setup-ruby@v1
              with:
                  bundler-cache: true
            - name: Download node dependencies cache
              uses: actions/cache@v3
              with:
                  path: node_modules/
                  key: ${{ runner.os}}-CC-node-deps
            - name: Install node dependencies
              run: yarn
            - name: Install ruby dependencies
              run: cd web && bundle install
            - name: Run prettier
              run: npx prettier --check --ignore-unknown .
    change-filter:
        runs-on: ubuntu-latest
        needs: code-quality
        outputs:
            web: ${{ steps.change-filter.outputs.web }}
            mobile: ${{ steps.change-filter.outputs.mobile }}
            desktop: ${{ steps.change-filter.outputs.desktop }}
            desktop-lite: ${{ steps.change-filter.outputs.desktop-lite }}
        steps:
            - uses: actions/checkout@v4
            - uses: dorny/paths-filter@v2
              id: changes
              with:
                  filters: |
                      web:
                        - 'web/**'
                      mobile:
                        - 'mobile/**'
                      desktop:
                        - 'desktop/**'
                        - 'rust-lib/**'
                      desktop-lite:
                        - 'desktop-lite/**'
                        - 'rust-lib/**'
    web:
        runs-on: ubuntu-latest
        needs: change-filter
        if: ${{ needs.changes.outputs.web == 'true' }}
        defaults:
            run:
                working-directory: ./web
        services:
            postgres:
                image: postgres:latest
                ports:
                    - "5432:5432"
                env:
                    POSTGRES_USER: postgres
                    POSTGRES_PASSWORD: password
        env:
            RAILS_ENV: test
            DB_URL: "postgres://postgres:password@localhost:5432"
        steps:
            - name: Checkout
              uses: actions/checkout@v4
            - name: Install Ruby
              uses: ruby/setup-ruby@v1
              with:
                  bundler-cache: true
            - name: Install Dependencies
              run: bundle install
            - name: Setup DB
              run: bin/rails db:prepare
    mobile:
        runs-on: macos-14
        needs: change-filter
        if: ${{ needs.changes.outputs.mobile == 'true' }}
        defaults:
            run:
                working-directory: ./mobile
        strategy:
            matrix:
                os: [android]
        steps:
            - name: Checkout
              uses: actions/checkout@v4
            - name: Install Node
              uses: actions/setup-node@v4
              with:
                  node-version: "20.x"
            - name: Download node dependencies cache
              uses: actions/cache@v3
              with:
                  path: mobile/node_modules/
                  key: ${{ runner.os }}-mobile-node-deps
            - name: Download Android prebuild cache
              uses: actions/cache@v3
              with:
                  path: mobile/android/
                  key: ${{ runner.os }}-mobile-prebuild-android
            - name: Download IOS prebuild cache
              uses: actions/cache@v3
              with:
                  path: mobile/ios/
                  key: ${{ runner.os }}-mobile-prebuild-ios
            - name: Install dependencies
              run: yarn install
            - name: Setup EAS
              uses: expo/expo-github-action@v8
              with:
                  eas-version: latest
                  token: ${{ secrets.EAS_TOKEN }}
            - name: Install JDK v17
              if: matrix.os == 'android'
              uses: actions/setup-java@v4
              with:
                  java-version: "17"
                  distribution: "temurin"
            - name: Install Android SDK
              if: matrix.os == 'android'
              uses: android-actions/setup-android@v3
            - name: Install Xcode
              if: matrix.os == 'ios'
              uses: maxim-lobanov/setup-xcode@v1
              with:
                  xcode-version: latest-stable
            - name: Build Android
              if: matrix.os == 'android'
              run: eas build --platform android --profile production --non-interactive --local
            - name: Build iOS
              if: matrix.os == 'ios'
              run: eas build --platform ios --profile production --non-interactive --local

    desktop:
        needs: change-filter
        if: ${{ needs.changes.outputs.desktop == 'true' }}
        defaults:
            run:
                working-directory: ./desktop
        strategy:
            fail-fast: false
            matrix:
                platform: [macos-14, ubuntu-latest, windows-latest]
        runs-on: ${{ matrix.platform }}
        steps:
            - name: Checkout
              uses: actions/checkout@v4
            - name: Install Node
              uses: actions/setup-node@v4
              with:
                  node-version: "20.x"
            - name: Install Rust
              uses: dtolnay/rust-toolchain@stable
            - name: Download node dependencies cache
              uses: actions/cache@v3
              with:
                  path: desktop/node_modules/
                  key: ${{ runner.os }}-desktop-node-deps
            - name: Download target/
              uses: actions/cache@v3
              with:
                  path: desktop/src-tauri/target
                  key: ${{ runner.os }}-${{ matrix.platform }}-desktop-rust-target
            - name: Install dependencies (ubuntu only)
              if: matrix.platform == 'ubuntu-latest'
              run: |
                  sudo apt-get update
                  sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev
            - name: Install frontend dependencies
              run: yarn install
            - name: Append Development version to version string
              run: node ../scripts/updateDevVersion.js
            - name: Build Tauri
              run: yarn tauri build
              env:
                  TAURI_PRIVATE_KEY: ${{ secrets.TAURI_UPDATER_PRIVATE_KEY }}
                  TAURI_KEY_PASSWORD: ${{ secrets.TAURI_UPDATER_PASSWORD }}
    desktop-lite:
        needs: change-filter
        if: ${{ needs.changes.outputs.desktop-lite == 'true' }}
        defaults:
            run:
                working-directory: ./desktop-lite
        strategy:
            fail-fast: false
            matrix:
                platform: [macos-14, ubuntu-latest, windows-latest]
        runs-on: ${{ matrix.platform }}
        steps:
            - name: Checkout
              uses: actions/checkout@v4
            - name: Install Node
              uses: actions/setup-node@v4
              with:
                  node-version: "20.x"
            - name: Install Rust
              uses: dtolnay/rust-toolchain@stable
            - name: Download node dependencies cache
              uses: actions/cache@v3
              with:
                  path: desktop/node_modules/
                  key: ${{ runner.os }}-desktop_lite-node-deps
            - name: Download target/
              uses: actions/cache@v3
              with:
                  path: desktop/src-tauri/target
                  key: ${{ runner.os }}-${{ matrix.platform }}-desktop_lite-rust-target
            - name: Install dependencies (ubuntu only)
              if: matrix.platform == 'ubuntu-latest'
              run: |
                  sudo apt-get update
                  sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev
            - name: Install frontend dependencies
              run: yarn install
            - name: Append Development version to version string
              run: node ../scripts/updateDevVersion.js
            - name: Build Tauri
              run: yarn tauri build
              env:
                  TAURI_PRIVATE_KEY: ${{ secrets.TAURI_UPDATER_PRIVATE_KEY }}
                  TAURI_KEY_PASSWORD: ${{ secrets.TAURI_UPDATER_PASSWORD }}
